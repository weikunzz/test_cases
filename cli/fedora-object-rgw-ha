#!/usr/bin/python
# -*- conding: UTF-8 -*-
# -*- copyright -*-

import getopt
import sys
import commands
import re
import os
import json
import threading
from icfs_util import NewConfigParser
from icfs_util import ip_format
import subprocess
import time


def usage():
    print """Help(-h|--help) for icfs-object-rgw-ha:
Usage:
>> icfs-object-rgw-ha ----+ --set +-- ><
                          + --start + 
                          + --stop --
Options:
    --set:    modify ctdb service
    --start:  start ctdb service
    --stop:   stop ctdb service
Exit status:
    0 if executed successfully
    1 if executed unsuccessfully

icfs-object-rgw-ha --set:
Usage:
>> icfs-object-rgw-ha ---- --set --+-- --network --public_ip --card --card_name----><
                                 --+-- --node --local_ip --------------><
                                 --+-- --push --host_list -------------><
Options:
    --network:    set the visual ip  --card: set network card name
    --node:       set the nodes ip
    --push:       push ctdb configure to other nodes

icfs-object-rgw-ha --start:
Usage:
>>icfs-object-rgw-ha ---- --start -------------------------><
Options:
    --start:      start ctdb service

icfs-object-rgw-ha --stop:
Usage:
>>icfs-object-rgw-ha ---- --stop -------------------------><
Options:
    --stop:      stop ctdb service"""

def error(error_number, message = ""):
    if 3600 == error_number:
        print "Error(3600): Input type error, " + message
    elif 3601 == error_number:
        print "Error(3601): Input Error, get help use '-h|--help'"
    elif 3602 == error_number:
        print "Error(3602): Input should contain client name and host name"
    elif 3603 == error_number:
        print "Error(3603): the client name is exist"
    elif 3604 == error_number:
        print "Error(3604): the hostname is invalid"
    elif 3605 == error_number:
        print "Error(3605): the client name is not exist"
    elif 3606 == error_number:
        print "Error(3606): /etc/ctdb/nodes is not exist"
    elif 3607 == error_number:
        print "Error(3608): /etc/ctdb/ctdbd.conf is not exits"
    elif 3608 == error_number:
        print "Error(3611): set \"systemctl start ctdb\" in /etc/rc.d/rc.local failed" + message
    elif 3609 == error_number:        
        print "Error(3609): start CTDB failed!" + message
    elif 3610 == error_number:
        print "Error(3610): stop CTDB failed!" + message


ctdb_conf_list = [('CTDB_RECOVERY_LOCK','null_lock'),('CTDB_PUBLIC_INTERFACE','eth0'),('CTDB_PUBLIC_ADDRESSES','/etc/ctdb/public_addresses'),('CTDB_NODES','/etc/ctdb/nodes'),('CTDB_DEBUGLEVEL','ERR'),('CTDB_MANAGES_RADOSGW','yes')]

def check_ctdb_list(list, key, value):
    ctdb_ok = False
    for x in list:
        if x[0] != 0 and x[0] != 1:
            continue
        if x[1] == key:
            x[2] = value
            x[0] = 0
            if list.count(x) > 1:  # delete the duplicate item
                list.remove(x)
            ctdb_ok = True
    if not ctdb_ok:
        list.append([0, key, value])
    #print "append: ",list
    lines = []
    for x in list:
        if x[0] == 0:
            lines.append("%s=%s" % (x[1], x[2]))
        elif x[0] == 1:
            lines.append("# %s=%s" % (x[1], x[2]))
        else:
            lines.append(x[2])
    content = "\n".join(lines)
    f = open("/etc/ctdb/ctdbd.conf", "w")
    f.write(content)
    f.close()

def get_network_card():
    list = []
    f = open("/etc/ctdb/public_addresses", "r")
    line = f.readline()
    card = line.split(' ')[-1]
    return card

def check_ctdb_conf():
    list = []
    if not os.path.exists("/etc/ctdb/ctdbd.conf"):
        error(3607)
        return 1 
    f = open("/etc/ctdb/ctdbd.conf", "r")
    lines = f.readlines()
    f.close()
    for line in lines:
        pattern = re.compile(r"^\s*([^#]*?)\s*?=\s*([^#]*?)\s*$")
        m = pattern.match(line)
        if m is not None:
            list.append([0, m.group(1), m.group(2)])
            continue
        pattern = re.compile(r"^\s*#\s*([^#]*?)\s*?=\s*([^#]*?)\s*$")
        m = pattern.match(line)
        if m is not None:
            list.append([1, m.group(1), m.group(2)])
            continue
        list.append([2, "", line.strip()])
    for key, value in ctdb_conf_list:
        if 'CTDB_PUBLIC_INTERFACE' == key:
            value = get_network_card()
        check_ctdb_list(list, key, value)
    return 0

def publicip(host, network_card):
    #print "publicip function"
    public_conf_path = "/etc/ctdb/"
    if os.path.exists(public_conf_path + "public_addresses.temp"):
        clean_str = "rm -f " + public_conf_path + "public_addresses.temp"
        os.system(clean_str)
    if 0 == len(network_card):
        error(3600, "--card is empty,please input the name of network card")
        sys.exit(1)
    ip_list = host.split(',')
    for ip in ip_list:
        ip_str = "echo " + ip + " " + network_card + ">> " + public_conf_path + "public_addresses.temp"
        os.system(ip_str)
    public_rename = "mv -f " + public_conf_path + "public_addresses.temp " + public_conf_path + "public_addresses"
    os.system(public_rename)

def node(host):
    #print "node function"
    node_conf_path = "/etc/ctdb/"
    if os.path.exists(node_conf_path + "nodes.temp"):
        clean_str = "rm -f " + public_conf_path + "nodes.temp"
        os.system(clean_str)
    ip_list = host.split(',')
    for ip in ip_list:
        ip_str = "echo " + ip + ">> " + node_conf_path + "nodes.temp"
        os.system(ip_str)
    node_rename = "mv -f " + node_conf_path + "nodes.temp " + node_conf_path + "nodes"
    os.system(node_rename)

def push(host):
    #print "enable function"
    check_ok = check_ctdb_conf()
    if check_ok:
        sys.exit(1)
    ctdb_conf_path = "/etc/ctdb/"
    ip_list = host.split(',')
    for ip in ip_list:
        public_str = "scp " + ctdb_conf_path + "public_addresses " + ip + ":" + ctdb_conf_path + "public_addresses > /dev/zero 2>&1" 
        node_str = "scp " + ctdb_conf_path + "nodes " + ip + ":" + ctdb_conf_path + "nodes > /dev/zero 2>&1"
        conf_str = "scp " + ctdb_conf_path + "ctdbd.conf " + ip + ":" + ctdb_conf_path + "ctdbd.conf > /dev/zero 2>&1"
        ctdb_str = public_str + ";" + node_str + ";" + conf_str
        #print "ctdb_str: ",ctdb_str
        os.system(ctdb_str)
  
def get_address():
    # get the specified node ip
    if not os.path.exists("/etc/ctdb/nodes"):
        error(3606)
        sys.exit(1)
    ip_list = []
    f = open("/etc/ctdb/nodes", "r")
    readout = f.readlines()
    for ip in readout:
        ip = ip.strip()
        if len(ip) == 0:
            continue
        ip_format(ip)
        ip_list.append(ip)
    return ip_list

def start():
    #print "start function"
    ip_list = get_address()
    for ip in ip_list:
        #get corresponding host name to speed up the ssh
        enable_ctdb_status, enable_ctdb_output = commands.getstatusoutput("ssh -o ConnectTimeout=2 -o ConnectionAttempts=2 \
        -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no \
        'root@%s' \"icfs-object-rgw-ha --enable\"" % ip)
        if enable_ctdb_status:
            error(3608, "ip:%s ctdb_output:%s"%(ip, enable_ctdb_output))
            sys.exit(1)

        ctdb_status, ctdb_output = commands.getstatusoutput("ssh -o ConnectTimeout=2 -o ConnectionAttempts=2 \
        -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no \
        'root@%s' \"systemctl start ctdb\"" % ip)
        if ctdb_status:
            error(3609, "ip:%s ctdb_output:%s"%(ip, ctdb_output))
            sys.exit(1)

def stop():
    #print "stop function"
    ip_list = get_address()
    for ip in ip_list:
        ctdb_status, ctdb_output = commands.getstatusoutput("ssh -o ConnectTimeout=2 -o ConnectionAttempts=2 \
        -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no \
        'root@%s' \"systemctl stop ctdb\"" % ip)
        if ctdb_status:
            error(3610, "ip:%s ctdb_output:%s"%(ip, ctdb_output))
            sys.exit(1)

def enable():
    #print "enable function"
    write_ctdb_status, write_ctdb_out = commands.getstatusoutput("cat /etc/rc.d/rc.local|grep -w 'systemctl start ctdb'")
    #print "write_ctdb_status: %s, write_ctdb_out: %s"%(write_ctdb_status, write_ctdb_out)
    if write_ctdb_out == '':
        write_status, write_out = commands.getstatusoutput("echo systemctl start ctdb >>/etc/rc.d/rc.local")
        #print "write_status: %s, write_out: %s"%(write_status, write_out)

ctdb_conf = ["help", "set", "network=", "card=", "node=", "push=", "start", "stop", "enable"]

if __name__ == "__main__":
    value = None
    host = None
    mode = None
    options = None

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'h', ctdb_conf)
    except getopt.GetoptError, err:
        error(3601)
        sys.exit(1)

    if opts == [] or args != []:
        error(3601)
    if len(sys.argv) == 1:
        error(3601)

    for k, v in opts:
        if k in ('-h', '--help'):
            if len(sys.argv) != 2:
                error(3601)
            else:
                options = "help"
        elif '--set' == k:
            options = "set"
        elif '--network' == k:
            mode = "network"
            host = v
        elif '--node' == k:
            mode = "node"
            host = v
        elif '--push' == k:
            mode = "push"
            host = v
        elif '--card' == k:
            value = v
        elif '--start' == k:
            options = "start"
        elif '--stop' == k:
            options = "stop"
        elif '--enable' == k:
            options = "enable"

    if options == 'help':
        usage()
    elif options == 'set' and mode == 'network':
        publicip(host, value)
    elif options == 'set' and mode == 'node':
        node(host)
    elif options == 'set' and mode == 'push':
        push(host)
    elif options == 'start':
        start()
    elif options == 'stop':
        stop()
    elif options == 'enable':
        enable()
    else:
        usage()
        error(3601)

