#!/usr/bin/python
# coding:utf-8
# -*- copyright -*-

import getopt
import sys
import socket
import pdb
import os
import re
import commands
from optparse import OptionParser

def error(error_number, message = ""):
    if 3606 == error_number:
        print "Error(3606): Input should contain client name"
    elif 3607 == error_number:
        print "Error(3607): Input should contain tenant and uid"
    elif 3608 == error_number:
        print "Error(3608): Input should contain max-objects and max-size"
    elif 3609 == error_number:
        print "Error(3609): Input should contain tenant, uid and display-name"
    elif 3610 == error_number:
        print "Error(3610): Could not fetch user info: no user info saved"
    elif 3611 == error_number:
        print "Error(3611): Input should contain user ID"
    elif 3601 == error_number:
        print "Error(3601): Input Error, get help use '-h|--help'"
    elif 3613 == error_number:
        print "Error(3613): Not enought parameters"
    elif 3614 == error_number:
        print "Error(3614): Parse failed: the option value is invalid"
    elif 3615 == error_number:
        print "Error(3615): Input should contain access_key, secret, host and port"
    elif 3616 == error_number:
        print "Error(3616): config file:/root/.s3cfg is not exist"
    elif 3681 == error_number:
        print "Error(3681): user not found"
    elif 3682 == error_number:
        print "Error(3682): accesskey and secret should modify at the same time"
    elif 3683 == error_number:
        print "Error(3683): unable to create or modify keys,existing S3 key in RGW system"
    elif 3684 == error_number:
        print "Error(3684): unable to create or modify user, the email address has been used"
    elif 3685 == error_number:
        print "Error(3685): unable to create user, the user has exists"

def usage():
    print '''Help(-h|--help) for icfs-object-user-admin:
    Usage:
    Options:
      --name          : rgw client name
      --tenant        : tenant name
      --uid           : user id
      --accessKey     : access key
      --secret        : secret
      --email         : user email
      --temp-url-key  : tempurl key for swift user
      --path          : access dir path for swift fs
      --perm          : dir permission for swift fs
      --host          : hostname
      --port          : rgw port
      --display-name  : display name
      --max-objects   : max objects
      --max-size      : max size
      --max-buckets   : max buckets
      --subuser       : sub user
      --swift_key     : subuser secret key
    Functions:
        create user
          icfs-object-user-admin --createUser --uid= --display-name= --email= --temp-url-key= --name=
        multi-tenant
        icfs-object-user-admin --multiTenant --tenant= --uid= --display-name= --email= --temp-url-key= --name= 
        modify-user
        icfs-object-user-admin --modifyuser --tenant= --uid= --display-name= --email= --temp-url-key= --name= 
        delete-user
        icfs-object-user-admin --deleteuser --tenant= --uid= --name= 

        user info
          icfs-object-user-admin --userInfo --tenant= --uid= --name=
        user install
          icfs-object-user-admin --userInstall --accessKey= --secret= --host= --port=
        enable bucket quota
          icfs-object-user-admin --bucketQuotaEnable --tenant= --uid= --name=
        set bucket quota
          icfs-object-user-admin --bucketQuotaSet --tenant= --uid= --max-objects= --max-size= --name=
        disable bucket quota
          icfs-object-user-admin --bucketQuotaDisable --tenant= --uid= --name=
        enable user quota
          icfs-object-user-admin --userQuotaEnable --tenant= --uid= --name=
        set user quota
          icfs-object-user-admin --userQuotaSet --tenant= --uid= --max-objects= --max-size= --max-buckets= --name=
        disable user quota
          icfs-object-user-admin --userQuotaDisable --tenant= --uid= --name=
        create subuser
          icfs-object-user-admin --createSubUser --tenant= --uid= --subuser= --path= --perm= --name=   	  
        modify subuser
          icfs-object-user-admin --modifySubUser --tenant= --uid= --subuser= --path= --perm= --name=   	  
        delete subuser
          icfs-object-user-admin --deleteSubUser --tenant= --uid= --subuser= --name=   	  
        pathinfo subuser
          icfs-object-user-admin --pathSubUser --tenant= --uid= --subuser= --name=   	  
    Exit status:
      0 if executed successfully
      1 if executed unsuccessfully
      '''
    
rgw_conf = ["help",
            "createUser",
            "modifyUser",
            "deleteUser",
            "multiTenant",
            "createSubUser",
            "modifySubUser",
            "deleteSubUser",
            "pathSubUser",
            "userInfo",
            "userInstall",
            "tenant=",
            "uid=",
            "accessKey=",
            "swift_key=",
            "secret=",
            "email=",
            "path=",
            "perm=",
            "temp-url-key=",
            "host=",
            "port=",
            "display-name=",
            "name=",
            "subuser=",
            "bucketQuotaEnable",
            "bucketQuotaSet",
            "bucketQuotaDisable",
            "userQuotaEnable",
            "userQuotaSet",
            "userQuotaDisable",
            "max-objects=",
            "max-size=",
            "max-buckets=",
     ]

def handlerRet(ret, messgae):
    if ret == 5632:
        if "failed to parse" in messgae:
            error(3614)
            sys.exit(1)
        elif "user info" in messgae:
            error(3610)
            sys.exit(1)
        elif "" ==  messgae:
            error(3681)
            sys.exit(1)
    if ret == 512:
        if "" ==  messgae:
            error(3681)
            sys.exit(1)
    if ret == 61696:
        if "" ==  messgae:
            error(3683)
            sys.exit(1)
    if ret == 0:
        if "" ==  messgae:
            error(3681)
            sys.exit(1)
        elif "existing S3 key in RGW system" in messgae:
            error(3683)
            sys.exit(1)
        else:
            print(messgae)

def createUser(options):
    tenant = ""
    uid = ""
    client = ""
    displayName = ""
    email = ""  
    for name, value in options:
        if name in ("--tenant"):
            tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--display-name"):
            displayName = value
        if name in ("--name"):
            client = value
        if name in ("--email"):
            email = value
    if client == "":
        error(3606)
        sys.exit(1)
    if uid == "" or displayName == "":
        error(3613)
        sys.exit(1)
    str1 = "radosgw-admin user create "
    str2 = "--uid=%s " % uid
    str3 = "--display-name=%s " % displayName
    str4 = "--name=%s 2>/dev/zero" % client
    if email == "":
        str5 = ""
    else:
        str5 = "--email=%s " % email
    if tenant == "":
        str6 = ""
    else:
        str6 = "--tenant=%s " % tenant
    str = str1 + str6 + str2 + str3 + str5 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def modifyUser(options):
    tenant = ""
    uid = ""
    client = ""
    displayName = ""
    email = ""
    accessKey = ""
    secret = ""      
    tempurl_key = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--display-name"):
            displayName = value
        if name in ("--name"):
            client = value
        if name in ("--email"):
            email = value
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--temp-url-key"):
            tempurl_key = value
    if client == "":
        error(3606)
        sys.exit(1)
    if uid == "":
        error(3609)
        sys.exit(1)
    if accessKey == "" and secret != "":
        error(3682)
        sys.exit(1)
    if accessKey != "" and secret == "":
        error(3682)
        sys.exit(1)
    str1 = "radosgw-admin user modify "
    if tenant == "":
        str2 = ""
    else:
        str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    if displayName == "":
        str4 = ""
    else:
        str4 = "--display-name=%s " % displayName
    str5 = "--name=%s 2>/root/temp" % client
    if email == "":
        str6 = ""
    else:
        str6 = "--email=%s " % email
    if tempurl_key == "":
        str7 = ""
    else:
        str7 = "--temp-url-key=%s " % tempurl_key
    if accessKey == "":
        str8 = ""
    else:
        str8 = "--access_key=%s " % accessKey
    if secret == "":
        str9 = ""
    else:
        str9 = "--secret=%s " % secret
    str = str1 + str2 + str3 + str4 + str6 + str7 + str8 + str9 + str5
    (ret, messgae) = commands.getstatusoutput(str)
    f = open('/root/temp')
    for line in f.readlines():
        if re.search('cannot add duplicate email',line):
            error(3684)
            f.close()
            os.remove('/root/temp')
            sys.exit(1)
    handlerRet(ret, messgae)

def deleteUser(options):
    tenant = ""
    uid = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--name"):
            client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if uid == "":
        error(3613)
        sys.exit(1)
    str1 = "radosgw-admin user rm "
    if tenant == "":
        str2 = ""
    else:
        str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--name=%s " % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if "user does not exist" in messgae:
        error(3681)
        sys.exit(1)
    else:
        print "success"

def multiTenant(options):
    tenant = ""
    uid = ""
    client = ""
    displayName = ""
    accessKey = ""
    secret = ""
    email = ""      
    tempurl_key = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--display-name"):
            displayName = value
        if name in ("--name"):
            client = value
        if name in ("--email"):
            email = value
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--temp-url-key"):
            tempurl_key = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "" or displayName == "":
        error(3609)
        sys.exit(1)
    str1 = "radosgw-admin user create "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--display-name=%s " % displayName
    str5 = "--name=%s 2>/root/temp" % client
    if email == "":
        str6 = ""
    else:
        str6 = "--email=%s " % email
    if tempurl_key == "":
        str7 = ""
    else:
        str7 = "--temp-url-key=%s " % tempurl_key
    if accessKey == "":
        str8 = ""
    else:
        str8 = "--access_key=%s " % accessKey
    if secret == "":
        str9 = ""
    else:
        str9 = "--secret=%s " % secret
    str = str1 + str2 + str3 + str4 + str6 + str7 + str8 + str9 + str5
    (ret, messgae) = commands.getstatusoutput(str)
    f = open('/root/temp')
    for line in f.readlines():
        if re.search('email address an existing',line):
            error(3684)
            f.close()
            os.remove('/root/temp')
            sys.exit(1)
        if re.search('user:',line):
            error(3685)
            f.close()
            os.remove('/root/temp')
            sys.exit(1)
    handlerRet(ret, messgae)

def userInfo(options):
    tenant = ""
    uid = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--name"):
            client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)
    str1 = "radosgw-admin user info "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--name=%s " % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def userInstall(options):
    accessKey = ""
    secret = ""
    host = ""
    port= ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--host"):
            host = value
        if name in ("--port"):
            port = value

    if accessKey == "" or secret == "" or host == "" or port == "":
        error(3615)
        sys.exit(1)
    hostandPort = host + ":" + port

    if os.path.exists('/root/.s3cfg') == False:
        error(3616)
        sys.exit(1)
    data_key = 'access_key = %s' % (accessKey,) + '\n'
    data_secret = 'secret_key = %s' % (secret,) + '\n'
    data_base = 'host_base = %s' % (hostandPort,) + '\n' 
    data_bucket = 'host_bucket = %s' % (hostandPort,) + '\n'
    with open('/root/.s3cfg', 'r') as r:
        lines=r.readlines()
    with open('/root/.s3cfg', 'w') as w: 
        for line in lines:
            if(line.find('access_key') == 0):
                w.write(data_key)
            elif(line.find('secret_key') == 0):
                w.write(data_secret)
            elif(line.find('host_base') == 0):
                w.write(data_base)
            elif(line.find('host_bucket') == 0):
                w.write(data_bucket)
            else:
                w.write(line)

def bucketQuotaSet(options):
    tenant = ""
    uid = ""
    objects = -1
    size = -1
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
        	 uid = value
        if name in ("--max-objects"):
        	objects = value
        if name in ("--max-size"):
        	 size = value
        if name in ("--name"):
        	 client = value
    if client == "":
        error(3606)
        sys.exit(1) 
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)
    if objects == -1 or size == -1:
    	  error(3608)
    	  sys.exit(1)
    
    str1 = "radosgw-admin quota set "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--max-objects=%s " % objects
    str5 = "--max-size=%s --quota-scope bucket " % size
    str6 = "--name=%s  " % client
    str = str1 + str2 + str3 + str4 + str5 + str6
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def bucketQuotaEnable(options):
    tenant = ""
    uid = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
        	 uid = value
        if name in ("--name"):
        	 client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)
    str1 = "radosgw-admin quota enable "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s  --quota-scope bucket " % uid
    str4 = "--name=%s " % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def bucketQuotaDisable(options):
    tenant = ""
    uid = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
        	 uid = value
        if name in ("--name"):
        	 client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)

    str1 = "radosgw-admin quota disable "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s  --quota-scope bucket " % uid
    str4 = "--name=%s  2>/dev/zero" % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def userQuotaSet(options):
    tenant = ""
    uid = ""
    objects = -1
    size = -1
    buckets = -1
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
        	 uid = value
        if name in ("--max-objects"):
        	objects = value
        if name in ("--max-size"):
        	 size = value
        if name in ("--max-buckets"):
        	 buckets = value
        if name in ("--name"):
        	 client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)
    if objects == -1 or size == -1:
    	  error(3608)
    	  sys.exit(1)
    str5 = ""
    if buckets != -1:
        str5 = "--max-buckets=%s " % buckets
 
    str1 = "radosgw-admin quota set "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--max-objects=%s " % objects
    str6 = "--max-size=%s --quota-scope user " % size
    str7 = "--name=%s 2>/dev/zero" % client
    str = str1 + str2 + str3 + str4 + str5 + str6 + str7
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def userQuotaEnable(options):
    tenant = ""
    uid = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
        	 uid = value
        if name in ("--name"):
        	 client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)

    str1 = "radosgw-admin quota enable "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s  --quota-scope user " % uid
    str4 = "--name=%s  " % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def userQuotaDisable(options):
    tenant = ""
    uid = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
        	 uid = value
        if name in ("--name"):
        	 client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if tenant == "" or uid == "":
        error(3607)
        sys.exit(1)

    str1 = "radosgw-admin quota disable "
    str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s  --quota-scope user " % uid
    str4 = "--name=%s  2>/dev/zero" % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def createSubUser(options):
    tenant = ""
    subuser = ""
    uid = ""
    swift_key = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
            tenant = value
        if name in ("--subuser"):
            subuser = value
        if name in ("--uid"):
            uid = value
        if name in ("--name"):
            client = value
        if name in ("--swift_key"):
            swift_key = value
    if client == "":
        error(3606)
        sys.exit(1)
    if subuser == "" or uid == "":
        error(3611)
        sys.exit(1)

    str1 = "radosgw-admin subuser create "
    if tenant == "":
        str6 = ""
    else:
        str6 = "--tenant=%s " % tenant
    if swift_key == "":
        str7 = ""
    else:
        str7 = "--key-type=swift --secret-key=%s " % swift_key 
    str2 = "--uid=%s " % uid
    str3 = "--subuser=%s " % subuser
    str4 = "--access=full "
    str5 = "--name=%s  2>/dev/zero" % client     
    str = str1 + str6 + str2 + str3 + str4 + str7 + str5
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)  

def modifySubUser(options):
    tenant = ""
    uid = ""
    subuser = ""
    client = ""
    swift_key = ""
    path = ""
    perm = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--subuser"):
            subuser = value
        if name in ("--name"):
            client = value
        if name in ("--path"):
            path = value
        if name in ("--perm"):
            perm = value
        if name in ("--swift_key"):
            swift_key = value
    if client == "":
        error(3606)
        sys.exit(1)
    if uid == "" or subuser == "":
        error(3609)
        sys.exit(1)
    str1 = "radosgw-admin subuser modify "
    if tenant == "":
        str2 = ""
    else:
        str2 = "--tenant=%s " % tenant
    if swift_key == "":
        str7 = ""
    else:
        str7 = "--secret-key=%s " % swift_key 
    str3 = "--uid=%s " % uid
    str4 = "--subuser=%s " % subuser
    if path == "":
        str5 = ""
    else:
        str5 = "--path=%s " % path 
    if perm == "":
        str6 = ""
    else:
        str6 = "--perm=%s " % perm 
    str8 = "--name=%s 2>/dev/zero" % client
    str = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def deleteSubUser(options):
    tenant = ""
    uid = ""
    subuser = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--subuser"):
            subuser = value
        if name in ("--name"):
            client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if uid == "" or subuser == "":
        error(3613)
        sys.exit(1)
    str1 = "radosgw-admin subuser rm "
    if tenant == "":
        str2 = ""
    else:
        str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--subuser=%s " % subuser
    str5 = "--name=%s " % client
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if "unable to parse request" in messgae:
        error(3614)
        sys.exit(1)
    if "subuser not found" in messgae:
        error(3681)
        sys.exit(1)
    else:
        print "success"

def pathSubUser(options):
    tenant = ""
    uid = ""
    subuser = ""
    client = ""
    for name, value in options:
        if name in ("--tenant"):
           tenant = value
        if name in ("--uid"):
            uid = value
        if name in ("--subuser"):
            subuser = value
        if name in ("--name"):
            client = value
    if client == "":
        error(3606)
        sys.exit(1)
    if uid == "" or subuser == "":
        error(3613)
        sys.exit(1)
    str1 = "radosgw-admin subuser pathinfo "
    if tenant == "":
        str2 = ""
    else:
        str2 = "--tenant=%s " % tenant
    str3 = "--uid=%s " % uid
    str4 = "--subuser=%s " % subuser
    str5 = "--name=%s 2>/dev/zero" % client
    str = str1 + str2 + str3 + str4 + str5
    (ret, messgae) = commands.getstatusoutput(str)
    handlerRet(ret, messgae)

def deal(options):
    for o, a in options:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif "--createUser" == o:
            createUser(options)
            sys.exit(0)
        elif "--modifyUser" == o:
            modifyUser(options)
            sys.exit(0)
        elif "--deleteUser" == o:
            deleteUser(options)
            sys.exit(0)
        elif "--multiTenant" == o:
            multiTenant(options)
            sys.exit(0)
        elif "--userInfo" == o:
            userInfo(options) 
            sys.exit(0)
        elif "--userInstall" == o:
            userInstall(options) 
            sys.exit(0)
        elif "--bucketQuotaDisable" == o:
            bucketQuotaDisable(options) 
            sys.exit(0)
        elif "--bucketQuotaEnable" == o:
            bucketQuotaEnable(options) 
            sys.exit(0)
        elif "--bucketQuotaSet" == o:
            bucketQuotaSet(options) 
            sys.exit(0)
        elif "--userQuotaDisable" == o:
            userQuotaDisable(options) 
            sys.exit(0)
        elif "--userQuotaEnable" == o:
            userQuotaEnable(options) 
            sys.exit(0)
        elif "--userQuotaSet" == o:
            userQuotaSet(options) 
            sys.exit(0)         
        elif "--createSubUser" == o:
            createSubUser(options) 
            sys.exit(0)
        elif "--modifySubUser" == o:
            modifySubUser(options) 
            sys.exit(0)
        elif "--deleteSubUser" == o:
            deleteSubUser(options) 
            sys.exit(0)
        elif "--pathSubUser" == o:
            pathSubUser(options) 
            sys.exit(0)
def main():
    try:
        options, args = getopt.getopt(sys.argv[1:], "h", rgw_conf)
    except getopt.GetoptError, err:
        error(3601)
        sys.exit(1)
    if len(sys.argv[0:]) == 1:
        usage()
        sys.exit(1)
    elif not options:
        usage()
        error(3601)
        sys.exit(1)
    elif len(args) != 0:
        usage()
        error(3601)
        sys.exit(1)
    # decode the  parameter
    deal(options)

if __name__ == "__main__":
    main()
