#!/usr/bin/python
#!/usr/bin/python
# coding:utf-8
# -*- copyright -*-

import getopt
import sys
import socket
import pdb
import os
import re
import commands
import pdb
from optparse import OptionParser

def error(error_number, message):
    if 3601 == error_number:
        print "Error(3601): Input Error, get help use '-h|--help'"
    elif 3602 == error_number:
        print "Error(3602): Input should contain  access_key and secret"
    elif 3689 == error_number:
        print "Error(3689): Input should contain bucket name"
    elif 3690 == error_number:
        print "Error(3690): InvalidBucketName"
    elif 3691 == error_number:
        print "Error(3691): NoSuchBucket"
    elif 3692 == error_number:
        print "Error(3692): BucketNotEmpty"
    elif 3693 == error_number:
        print "Error(3693): Input should contain expire days,with params --days"
    elif 3694 == error_number:
        print "Error(3694): SignatureDoesNotMatch"
    elif 3695 == error_number:
        print "Error(3695): BucketExisting"

def usage():
    print '''Help(-h|--help) for icfs-object-bucket:
    Usage:
    Options:
      --accessKey     : the access key for specified user
      --secret        : the secret key for specified user
      --bucketName    : the name of bucket for specified user
      --max-keys      : the max num of each page
      --start-marker  : begin the listing with this object
      --end-marker    : end the listing with this object
      --days          : the expire time for bucket
	  --stat          : the status of version
	  --objectName=   : the name of object for specified user
	  --versionId=    : the Id of version 
     
    Functions:
        make bucket
          icfs-object-bucket --mb --accessKey=  --secret=  --bucketName=
        get bucket info
        icfs-object-bucket --info --accessKey=  --secret=  --bucketName=
        remove bucket
        icfs-object-bucket --rb --accessKey=  --secret=  --bucketName=
        get bucket list
        icfs-object-bucket --ls --accessKey=  --secret=  
        get dir list in bucket
          icfs-object-bucket --dir --accessKey=  --secret=  --bucketName=
        get object list with specified number each page
          icfs-object-bucket --page --accessKey=  --secret=  --bucketName=  --max-keys=  --start-marker=
        set bucket expiration rule for specified bucket
          icfs-object-bucket --setlifecycle --accessKey=  --secret=  --bucketName=  --days=
        get bucket expiration info 
          icfs-object-bucket --lifecycleinfo --accessKey=  --secret=  --bucketName=
        remove bucket expiration rule form specified bucket
          icfs-object-bucket --dellifecycle --accessKey=  --secret=  --bucketName=
		list version status
		  icfs-object-bucket --versionstatus --accessKey=  --secret=  --bucketName=
        config version status
		  icfs-object-bucket --versionconfig --accessKey=  --secret=  --bucketName=  --stat=
		list version object
		  icfs-object-bucket --versionlist --accessKey=  --secret=  --bucketName=  
		delete the version object
		  icfs-object-bucket --versiondelete --accessKey=  --secret=  --bucketName=  --objectName=  --versionId=
		  
    Exit status:
      0 if executed successfully
      1 if executed unsuccessfully
      '''
    
rgw_conf = ["help",
            "mb",
            "info",
            "rb",
            "ls",
            "dir",
            "page",
            "setlifecycle",
            "lifecycleinfo",
            "dellifecycle",
            "accessKey=",
            "secret=",
            "bucketName=",
            "objectName=",
            "max-keys=",
            "start-marker=",
            "end-marker=",
            "days=",
	    "versionstatus",
	    "versionconfig",
            "stat=",
	    "versionlist",
            "versiondelete",
            "versionId=",
     ]

def handlerRet(ret, messgae):
    if "is too short" in messgae:
        error(3690, messgae)
        sys.exit(1)
    if "contains disallowed character" in messgae:
        error(3690, messgae)
        sys.exit(1)
    elif "InvalidBucketName" in messgae:
        error(3690,messgae)
        sys.exit(1)
    elif "NoSuchBucket" in messgae:
        error(3691,messgae)
        sys.exit(1)
    elif "BucketNotEmpty" in messgae:
        error(3692,messgae)
        sys.exit(1)
    elif "SignatureDoesNotMatch" in messgae:
        error(3694,messgae)
        sys.exit(1)
    elif "BucketAlreadyExists" in messgae:
        error(3695,messgae)
        sys.exit(1)


def makeBucket(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli mb "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    str_test = "doscli info " + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str_test)
    if ret == 0:
        error(3695,messgae)
        sys.exit(1)
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def bucketInfo(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli du "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def removeBucket(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli rb "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def listBucket(options):
    accessKey = ""
    secret = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    str1 = "doscli ls "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str = str1 + str2 + str3
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def bucketDir(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli dir "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def pageList(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    maxKeys = ""
    startMarker = ""
    endMarker = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
        if name in ("--max-keys"):
            maxKeys = value
        if name in ("--start-marker"):
            startMarker = value
        if name in ("--end-marker"):
            endMarker = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli page_json "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s " % bucketName
    op = bucketName.find('/')
    if op != -1:
        prefix = bucketName[4:]
    else:
        prefix = ""
    str5 = " --limit %s" %maxKeys
    if startMarker != "":
        str6 = " --start-marker marker:%s%s" %(prefix, startMarker)
    else:
        str6 = ""
    if endMarker != "":
        str7 = " --end-marker end-marker:%s" %startMarker
    else:
        str7 = ""
    str = str1 + str2 + str3 + str4 + str5 + str6 + str7
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def setLifeCycle(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    days = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
        if name in ("--days"):
            days = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    if days == "":
        error(3693, "")
        sys.exit(1)
    if os.path.exists('/root/lifecycle.xml'):
        os.remove('/root/lifecycle.xml')
    days_info = "<Days>%s</Days>" %days + '\n'
    with open('/root/lifecycle.xml', 'w') as w:
        w.write("<?xml version='1.0' encoding='utf-8'?>" + '\n')
        w.write("<LifecycleConfiguration>" + '\n')
        w.write("<Rule>" + '\n')
        w.write("<Prefix></Prefix>" + '\n')
        w.write("<Status>Enabled</Status>" + '\n')
        w.write("<ID>1</ID>" + '\n')
        w.write("<Expiration>" + '\n')
        w.write(days_info)
        w.write("</Expiration>" + '\n')
        w.write("</Rule>" + '\n')
        w.write("</LifecycleConfiguration>" + '\n')
    str1 = "doscli setlifecycle /root/lifecycle.xml "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    os.remove('/root/lifecycle.xml')
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def lifeCycleInfo(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli info "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s " % bucketName
    str5 = "| grep Expiration"
    str = str1 + str2 + str3 + str4 + str5
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        if "none" in messgae:
            status = "off"
            dayNum = "none"
        else:
            status = "on"
            dayNum = messgae.split()[10].split('\'')[1]
        print "status:  %s" %status
        print "days:  %s" %dayNum
        sys.exit(0)

def delLifeCycle(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if bucketName == "":
        error(3689, "")
        sys.exit(1)
    str1 = "doscli dellifecycle "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def listVerStat(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    str1 = "doscli vs "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def setVerStat(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    stat = ""
    for name, value in options:
        if name in ("--stat"):
            stat = value
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    if stat == "on":
        stat = "enabled"
    if stat == "off":
        stat = "disabled"
    str1 = "doscli cv "
    str2 = " %s " % stat
    str3 = "--access_key=%s " % accessKey
    str4 = "--secret_key=%s " % secret
    str5 = "s3://%s" % bucketName
    str = str1 + str2 + str3 + str4 + str5
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)

def listVerObj(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    startMarker = ""
    versionId = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
        if name in ("--max-keys"):
            maxKeys = value
        if name in ("--start-marker"):
            startMarker = value
        if name in ("--versionId"):
            versionId = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    str1 = "doscli vl_json "
    str2 = "--access_key=%s " % accessKey
    str3 = "--secret_key=%s " % secret
    str4 = " s3://%s " % bucketName
    str5 = " --limit %s " %maxKeys
    if startMarker != "":
        if startMarker.endswith("(deleted)"):
            startMarker = startMarker[:-9]
        str6 = " --key-marker key-marker:%s " %startMarker
    else:
        str6 = ""
    if versionId != "":
        str7 = " --versionid-marker version-id-marker:%s " %versionId
    else:
        str7 = ""
    str = str1 + str2 + str3 + str4 + str5 + str6 + str7
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print (messgae)
        sys.exit(0)	

def deleteVerObj(options):
    accessKey = ""
    secret = ""
    bucketName = ""
    objectName = ""
    versionId = ""
    for name, value in options:
        if name in ("--accessKey"):
            accessKey = value
        if name in ("--secret"):
            secret = value
        if name in ("--bucketName"):
            bucketName = value
        if name in ("--objectName"):
            objectName = value
        if name in ("--versionId"):
            versionId = value
    if accessKey == "" or secret == "":
        error(3602, "")
        sys.exit(1)
    str1 = "doscli vdel "
    str2 = " %s " % versionId
    str3 = "--access_key=%s " % accessKey
    str4 = "--secret_key=%s " % secret
    if bucketName.endswith("/"):
        bucketName = bucketName[:-1]
    str5 = "s3://%s/" % bucketName
    if objectName.endswith("(deleted)"):
            objectName = objectName[:-9]
    str6 = "%s" % objectName
    str = str1 + str2 + str3 + str4 + str5 + str6
    (ret, messgae) = commands.getstatusoutput(str)
    if ret != 0:
        handlerRet(ret, messgae)
    else:
        print "success"
        sys.exit(0)
	
def deal(options):
    for o, a in options:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif "--mb" == o:
            makeBucket(options)
            sys.exit(0)
        elif "--info" == o:
            bucketInfo(options)
            sys.exit(0)
        elif "--rb" == o:
            removeBucket(options)
            sys.exit(0)
        elif "--ls" == o:
            listBucket(options)
            sys.exit(0)
        elif "--dir" == o:
            bucketDir(options)
            sys.exit(0)
        elif "--page" == o:
            pageList(options)
            sys.exit(0)
        elif "--setlifecycle" == o:
            setLifeCycle(options)
            sys.exit(0)
        elif "--lifecycleinfo" == o:
            lifeCycleInfo(options)
            sys.exit(0)
        elif "--dellifecycle" == o:
            delLifeCycle(options)
            sys.exit(0)
        elif "--versionstatus" == o:
            listVerStat(options)
            sys.exit(0)
        elif "--versionconfig" == o:
            setVerStat(options)
            sys.exit(0)
        elif "--versionlist" == o:
            listVerObj(options)
            sys.exit(0)
        elif "--versiondelete" == o:
            deleteVerObj(options)
            sys.exit(0)

def main():
    try:
        options, args = getopt.getopt(sys.argv[1:], "h", rgw_conf)
    except getopt.GetoptError, err:
        error(3601)
        sys.exit(1)
    if len(sys.argv[0:]) == 1:
        usage()
        sys.exit(1)
    elif not options:
        usage()
        error(3601)
        sys.exit(1)
    elif len(args) != 0:
        usage()
        error(3601)
        sys.exit(1)
    # decode the  parameter
    deal(options)

if __name__ == "__main__":
    main()
