#!/usr/bin/env python
# -*- copyright -*-
# coding:utf-8
import sys
import re
import commands
import getopt


def getNodeMap():
    cmd_stat, cmd_rs = commands.getstatusoutput("cat /etc/hosts | grep -v 127.0.0.1 | grep -v ::1")
    if cmd_stat != 0:
        print "Error: get host FAILED"
        sys.exit(1)
    nameToIp = {}
    ipToName = {}
    lines = cmd_rs.split('\n')
    for line in lines:
        strs = re.split('\s+', line)
        if ip_check(strs[0]):
            name = strs[1]
            nameToIp[name] = strs[0]
            ipToName[strs[0]] = name
#    print nameToIp,ipToName
    return 0, {"nameToIp": nameToIp, "ipToName": ipToName}


def ip_check(ipcheck):
    if not re.match(r"^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$", ipcheck):
        return False
    return True


def usage():
    print """Usage:
>>-- check_icfs_ssd--- low --- mid --- high --- [device] ----><
query ssd abrasion.
positional parameter:
  low       low abrasion threshold value (integer)
  mid       middle abrasion threshold value (integer)
  high      high abrasion threshold value (integer)
  device    ssd device path
options:
  -h|--help   print this information
"""


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'h', ["help"])
    except getopt.GetoptError, err:
        print "Error(610): Invalid input!"
        print err
        usage()
        sys.exit(1)
    if not args:
        usage()
        sys.exit(1)
    low = 0
    mid = 0
    high = 0
    device = None
    for key, value in opts:
        if key == "-h" or key == "--help":
            usage()
            sys.exit(0)
    try:
        if len(args) == 4:
            low = int(args[0])
            mid = int(args[1])
            high = int(args[2])
            device = args[3]
        elif len(args) == 3:
            low = int(args[0])
            mid = int(args[1])
            high = int(args[2])
        else:
            print "Error(610): Invalid input!"
            usage()
            sys.exit(1)
    except Exception, e:
        print "Error(610): Invalid input!"
        print e
        usage()
        sys.exit(1)
    # code, info = check_ssd_abrasion(device, low, mid, high)
    code, nodeMap = getNodeMap()
    hosts = nodeMap["nameToIp"].keys()
    result = []
    result_code = 0
    for i in hosts:
        code, info = commands.getstatusoutput("ssh root@%s 'python /usr/bin/check_icfs_ssd_health %s %s %s' " % (i, str(low), str(mid), str(high)))
        result_code = max(result_code, code >> 8)
        for line in info.splitlines():
            result.append(str(nodeMap["nameToIp"][i]) + "_" + line)
    if result_code > 0:
        print "WARNING: SSD_wear is abnormal,threshold %s %s %s" % (str(low), str(mid), str(high))
        print ";".join(result)
    else:
        print "OK: SSD_wear is normal"
        print "SSD_wear"
    sys.exit(result_code)
