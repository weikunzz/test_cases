# Template used to deploy metadash
# TODO: Use S2I style, we are not using yet because some plugins required special setup
# will strip thoese plugins into standalone services and the plugin will be just a call to
# the service (eg. beaker server, which uses 'bkr' command, we have to setup kerberos and
# and keytab)
# Remember to setup a webhook manually to trigger build from push
---
kind: Template
apiVersion: v1
metadata:
  name: metadash
  annotations:
    description: Metadash
    iconClass: icon-shadowman
    tags: redhat,metadash
objects:

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "metadash"
    labels:
      application: "metadash"

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "metadash-image"
  spec:
    source:
      type: Git
      git:
        uri: "${GIT_URI}"
        ref: "${GIT_REF}"
      sourceSecret:
        name: cee-gitlab
    strategy:
      type: Docker
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: provisioner-base:latest
        env:
            # Required for database migrate and initialization
            - name: APP_SQLALCHEMY_DATABASE_URI
              value: "${DATABASE_ENGINE}://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_SERVICE}/${DATABASE_NAME}"
    output:
      to:
        kind: ImageStreamTag
        name: "metadash:latest"
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-worker"
    creationTimestamp:
    labels:
      application: "${APPLICATION_NAME}-worker"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}-worker"
        from:
          kind: ImageStreamTag
          name: "metadash:latest"
    replicas: 1
    selector:
      application: "${APPLICATION_NAME}-worker"
      deploymentconfig: "${APPLICATION_NAME}-worker"
    template:
      metadata:
        creationTimestamp:
        labels:
          application: "${APPLICATION_NAME}-worker"
          deploymentconfig: "${APPLICATION_NAME}-worker"
      spec:
        containers:
        # The container for celery worker
        - name: "${APPLICATION_NAME}-worker"
          image: "metadash:latest"
          env:
              - name: APP_SQLALCHEMY_DATABASE_URI
                value: "${DATABASE_ENGINE}://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_SERVICE}/${DATABASE_NAME}"
              - name: APP_SECRET_KEY
                value: "${APPLICATION_SECRET_KEY}"
              - name: APP_CACHE_DEFAULT_BACKEND
                value: "dogpile.cache.redis"
              - name: APP_CACHE_ARGUEMENTS
                value: "{\"distributed_lock\": true, \"lock_timeout\": 10, \"host\": \"${REDIS_SERVICE}\", \"password\":\"${REDIS_PASSWORD}\", \"port\": \"${REDIS_PORT}\"}"
              - name: CELERY_BROKER_URL
                value: 'redis://:${REDIS_PASSWORD}@${REDIS_SERVICE}:${REDIS_PORT}'
              - name: CELERY_RESULT_BACKEND
                value: 'redis://:${REDIS_PASSWORD}@${REDIS_SERVICE}:${REDIS_PORT}'
          resources: {}
          imagePullPolicy: Always
          command:
              - "/app/docker/entrypoint.sh"
              - "--worker"
              - "--venv"
              - "/app/.venv"
        restartPolicy: Always
        terminationGracePeriodSeconds: 120
        dnsPolicy: ClusterFirst
        securityContext: {}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-beat-worker"
    creationTimestamp:
    labels:
      application: "${APPLICATION_NAME}-beat-worker"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}-beat-worker"
        from:
          kind: ImageStreamTag
          name: "metadash:latest"
    replicas: 1
    selector:
      application: "${APPLICATION_NAME}-beat-worker"
      deploymentconfig: "${APPLICATION_NAME}-beat-worker"
    template:
      metadata:
        creationTimestamp:
        labels:
          application: "${APPLICATION_NAME}-beat-worker"
          deploymentconfig: "${APPLICATION_NAME}-beat-worker"
      spec:
        containers:
        # The container for celery beat worker
        - name: "${APPLICATION_NAME}-beat-worker"
          image: "metadash:latest"
          env:
              - name: APP_SQLALCHEMY_DATABASE_URI
                value: "${DATABASE_ENGINE}://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_SERVICE}/${DATABASE_NAME}"
              - name: APP_SECRET_KEY
                value: "${APPLICATION_SECRET_KEY}"
              - name: APP_CACHE_DEFAULT_BACKEND
                value: "dogpile.cache.redis"
              - name: APP_CACHE_ARGUEMENTS
                value: "{\"distributed_lock\": true, \"lock_timeout\": 10, \"host\": \"${REDIS_SERVICE}\", \"password\":\"${REDIS_PASSWORD}\", \"port\": \"${REDIS_PORT}\"}"
              - name: CELERY_BROKER_URL
                value: 'redis://:${REDIS_PASSWORD}@${REDIS_SERVICE}:${REDIS_PORT}'
              - name: CELERY_RESULT_BACKEND
                value: 'redis://:${REDIS_PASSWORD}@${REDIS_SERVICE}:${REDIS_PORT}'
          resources: {}
          imagePullPolicy: Always
          command:
              - "/app/docker/entrypoint.sh"
              - "--beat-worker"
              - "--venv"
              - "/app/.venv"
        restartPolicy: Always
        terminationGracePeriodSeconds: 120
        dnsPolicy: ClusterFirst
        securityContext: {}


- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    creationTimestamp:
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "metadash:latest"
    replicas: 1
    selector:
      application: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        creationTimestamp:
        labels:
          application: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        containers:
        # The container for metadash wsgi
        - name: "${APPLICATION_NAME}"
          image: "metadash:latest"
          env:
              - name: APP_SQLALCHEMY_DATABASE_URI
                value: "${DATABASE_ENGINE}://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_SERVICE}/${DATABASE_NAME}"
              - name: APP_SECRET_KEY
                value: "${APPLICATION_SECRET_KEY}"
              - name: APP_CACHE_DEFAULT_BACKEND
                value: "dogpile.cache.redis"
              - name: APP_CACHE_ARGUEMENTS
                value: "{\"distributed_lock\": true, \"lock_timeout\": 10, \"host\": \"${REDIS_SERVICE}\", \"password\":\"${REDIS_PASSWORD}\", \"port\": \"${REDIS_PORT}\"}"
              - name: CELERY_BROKER_URL
                value: 'redis://:${REDIS_PASSWORD}@${REDIS_SERVICE}:${REDIS_PORT}'
              - name: CELERY_RESULT_BACKEND
                value: 'redis://:${REDIS_PASSWORD}@${REDIS_SERVICE}:${REDIS_PORT}'
          resources: {}
          imagePullPolicy: Always
          ports:
              - containerPort: 8080
                protocal: TCP
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      template.openshift.io/expose-service_ip_port: "{.spec.clusterIP}:{.spec.ports[?(.name==\"web\")].port}"
  spec:
    ports:
    - name: "web"
      port: 8080
    selector:
      application: "${APPLICATION_NAME}"

- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      template.openshift.io/expose-uri: "http://{.spec.host}{.spec.path}"
  spec:
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
    path: /

parameters:
- name: APPLICATION_NAME
  description: Application Name
  value: metadash
- name: APPLICATION_SECRET_KEY
  description: A secret value used for salting and security sensitive matters
  generate: expression
  from: "[\\w]{50}"
- name: DATABASE_ENGINE
  description: Database Service Name
  required: true
  value: postgresql
- name: DATABASE_SERVICE
  description: Database Service Name
  required: true
  value: metadash-postgresql
- name: DATABASE_USER
  description: Database User Name
  required: true
  value: metadash
- name: DATABASE_NAME
  description: Database Name
  required: true
  value: metadash
- name: DATABASE_PASSWORD
  description: Database User Password
  required: true
  value: metadash
- name: REDIS_SERVICE
  description: Redis service name
  required: true
  value: metadash-redis
- name: REDIS_PASSWORD
  description: Database User Password
  required: true
- name: REDIS_PORT
  description: Redis service name
  required: true
  value: "6379"
- name: GIT_URI
  description: Git Repository
  value: git@gitlab.cee.redhat.com:libvirt-auto/metadash.git
- name: GIT_REF
  description: Git Branch
  value: rh
labels:
  template: metadash
